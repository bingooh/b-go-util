// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.5
// source: hi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	Hi(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (*HiRsp, error)
	NewServerStream(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (Greeter_NewServerStreamClient, error)
	NewStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_NewStreamClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) Hi(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (*HiRsp, error) {
	out := new(HiRsp)
	err := c.cc.Invoke(ctx, "/test.rpc.hi.Greeter/Hi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) NewServerStream(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (Greeter_NewServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], "/test.rpc.hi.Greeter/NewServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterNewServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_NewServerStreamClient interface {
	Recv() (*HiRsp, error)
	grpc.ClientStream
}

type greeterNewServerStreamClient struct {
	grpc.ClientStream
}

func (x *greeterNewServerStreamClient) Recv() (*HiRsp, error) {
	m := new(HiRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) NewStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_NewStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], "/test.rpc.hi.Greeter/NewStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterNewStreamClient{stream}
	return x, nil
}

type Greeter_NewStreamClient interface {
	Send(*HiReq) error
	Recv() (*HiRsp, error)
	grpc.ClientStream
}

type greeterNewStreamClient struct {
	grpc.ClientStream
}

func (x *greeterNewStreamClient) Send(m *HiReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterNewStreamClient) Recv() (*HiRsp, error) {
	m := new(HiRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	Hi(context.Context, *HiReq) (*HiRsp, error)
	NewServerStream(*HiReq, Greeter_NewServerStreamServer) error
	NewStream(Greeter_NewStreamServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) Hi(context.Context, *HiReq) (*HiRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hi not implemented")
}
func (UnimplementedGreeterServer) NewServerStream(*HiReq, Greeter_NewServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NewServerStream not implemented")
}
func (UnimplementedGreeterServer) NewStream(Greeter_NewStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NewStream not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_Hi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Hi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.rpc.hi.Greeter/Hi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Hi(ctx, req.(*HiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_NewServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HiReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).NewServerStream(m, &greeterNewServerStreamServer{stream})
}

type Greeter_NewServerStreamServer interface {
	Send(*HiRsp) error
	grpc.ServerStream
}

type greeterNewServerStreamServer struct {
	grpc.ServerStream
}

func (x *greeterNewServerStreamServer) Send(m *HiRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_NewStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).NewStream(&greeterNewStreamServer{stream})
}

type Greeter_NewStreamServer interface {
	Send(*HiRsp) error
	Recv() (*HiReq, error)
	grpc.ServerStream
}

type greeterNewStreamServer struct {
	grpc.ServerStream
}

func (x *greeterNewStreamServer) Send(m *HiRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterNewStreamServer) Recv() (*HiReq, error) {
	m := new(HiReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.rpc.hi.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hi",
			Handler:    _Greeter_Hi_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewServerStream",
			Handler:       _Greeter_NewServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewStream",
			Handler:       _Greeter_NewStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hi.proto",
}

// WaiterClient is the client API for Waiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaiterClient interface {
	Hi(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (*HiRsp, error)
}

type waiterClient struct {
	cc grpc.ClientConnInterface
}

func NewWaiterClient(cc grpc.ClientConnInterface) WaiterClient {
	return &waiterClient{cc}
}

func (c *waiterClient) Hi(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (*HiRsp, error) {
	out := new(HiRsp)
	err := c.cc.Invoke(ctx, "/test.rpc.hi.Waiter/Hi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaiterServer is the server API for Waiter service.
// All implementations must embed UnimplementedWaiterServer
// for forward compatibility
type WaiterServer interface {
	Hi(context.Context, *HiReq) (*HiRsp, error)
	mustEmbedUnimplementedWaiterServer()
}

// UnimplementedWaiterServer must be embedded to have forward compatible implementations.
type UnimplementedWaiterServer struct {
}

func (UnimplementedWaiterServer) Hi(context.Context, *HiReq) (*HiRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hi not implemented")
}
func (UnimplementedWaiterServer) mustEmbedUnimplementedWaiterServer() {}

// UnsafeWaiterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaiterServer will
// result in compilation errors.
type UnsafeWaiterServer interface {
	mustEmbedUnimplementedWaiterServer()
}

func RegisterWaiterServer(s grpc.ServiceRegistrar, srv WaiterServer) {
	s.RegisterService(&Waiter_ServiceDesc, srv)
}

func _Waiter_Hi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaiterServer).Hi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.rpc.hi.Waiter/Hi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaiterServer).Hi(ctx, req.(*HiReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Waiter_ServiceDesc is the grpc.ServiceDesc for Waiter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Waiter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.rpc.hi.Waiter",
	HandlerType: (*WaiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hi",
			Handler:    _Waiter_Hi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hi.proto",
}
